{"name":"Django-rest-encrypted-lookup","tagline":"","body":"django-rest-encrypted-lookup\r\n=============\r\n\r\ndjango-rest-encrypted-lookup provides replacement ViewSets, Serializers, and Fields that replace your IntegerField pk or id lookups with encrypted string lookups.\r\n\r\nThe json representation of a poll:\r\n```\r\n    {\r\n        \"id\": 5,\r\n        \"questions\": [\r\n                      2,\r\n                      10,\r\n                      12,\r\n        ]\r\n    }\r\n```\r\nbecomes:\r\n```\r\n    {\r\n        \"id\": \"4xoh7gja2mtvz3i47ywy5h6ouu\",\r\n        \"questions\": [\r\n                      \"t6y4zo26vutj4xclh5hpy3sc5m\",\r\n                      \"hp7c75ggggiwv6cs5zc4mpzeoe\",\r\n                      \"rqq5a2evfokyo7tz74loiu3bcq\",\r\n        ]\r\n    }\r\n```\r\n\r\nThe endpoint:\r\n\r\n```\r\n    /api/polls/5/\r\n```\r\nbecomes:\r\n```\r\n    /api/polls/4xoh7gja2mtvz3i47ywy5h6ouu/\r\n```\r\n\r\nEncrypted lookups are *not* appropriate to use as a security measure against users guessing object URIs. Encrypted\r\nlookups *are* appropriate to use as a non-security-critical method of obfuscating object pks/ids.\r\n\r\n\r\nInstallation\r\n===============\r\n\r\nInstall the module in your Python distribution or virtualenv:\r\n\r\n    $ pip install django-rest-encrypted-lookup\r\n\r\nAdd the application to your `INSTALLED_APPS`:\r\n\r\n```\r\n  INSTALLED_APPS = (\r\n  ...\r\n  \"rest_framework_encrypted_lookup\",\r\n  ...\r\n  )\r\n```\r\n\r\nAnd in settings.py:\r\n\r\n```\r\n  LOOKUP_FIELD = 'id'  # String value name of your drf lookup field, generally 'id' or 'pk'\r\n  \r\n  # Choose your own \r\n  # Protect ID_ENCRYPT_SECRET as closely as your SECRET_KEY\r\n  # DO NOT set ID_ENCRYPT_SECRET to be equal to your SECRET_KEY\r\n  # If ID_ENCRYPT_SECRET changes, then your lookup strings will change\r\n  ID_ENCRYPT_SECRET = b'16Secretchars+++'\r\n```\r\n\r\nHow it Works\r\n============\r\n\r\nEncrypted lookup strings are *not* stored in the database in association with the objects they represent. Encrypted\r\nlookups are generated by the model serializers during response composition. Encrypted lookups presented in the endpoint\r\nURI are decrypted in the call to dispatch, and encrypted lookups presented in data fields are decrypted by the model\r\ndeserializers.\r\n\r\nEncryption is provided by the PyCrypto AES library.\r\n\r\nUse\r\n===\r\n\r\ndjango-rest-encrypted-lookup provides two field classes:\r\n\r\n    from rest_framework_encrypted_lookup.fields import EncryptedLookupField, EncryptedLookupRelatedField\r\n    \r\na new serializer class:\r\n\r\n    from rest_framework_encrypted_lookup.serializers import EncryptedLookupModelSerializer\r\n    \r\nand a generic view class:\r\n\r\n    from rest_framework_encrypted_lookup.views import EncryptedLookupGenericViewSet\r\n    \r\nUse these in place of the classes provided with Django Rest Framework 3.\r\n    \r\nExample:\r\n\r\n``` \r\n    # models.py\r\n    ...\r\n    class Poll(models.Model):\r\n        ...\r\n        \r\n        \r\n    # serializers.py\r\n    ...\r\n    class PollSerializer(EncryptedLookupModelSerializer):\r\n\r\n        class Meta:\r\n            model = Poll\r\n            \r\n            \r\n    # views.py\r\n    ...\r\n    from rest_framework import viewsets\r\n    \r\n    class PollViewSet(EncryptedLookupGenericViewSet,\r\n                      viewsets.mixins.ListModelMixin,\r\n                      viewsets.mixins.RetrieveModelMixin,\r\n                      ...\r\n                     )\r\n        \r\n        queryset = Poll.objects.all()\r\n        serializer_class = PollSerializer\r\n        \r\n        lookup_field = 'id'\r\n```\r\n\r\nOf the four classes included in this package, the example above makes use of `EncryptedLookupModelSerializer`, and \r\n`EncryptedLookupGenericViewSet`.\r\n\r\nThe fields `EncryptedLookupField`, `EncryptedLookupRelatedField` are used implicitly\r\nby the EncryptedLookupModelSerializer. These fields may also be used explicitly, if needed.\r\n\r\nCompatibility\r\n=============\r\n\r\n* Django Rest Framework 3\r\n* Django 1.6, 1.7\r\n* Python 2.7, 3.4\r\n\r\nAdditional Requirements\r\n=======================\r\n\r\n* PyCrypto\r\n\r\nTodo\r\n====\r\n\r\n* Model name salts.\r\n* Coverage.\r\n* Wheels.\r\n* Settings dictionary.\r\n* EncryptedLookupHyperlinkedModelSerializer.\r\n\r\nGetting Involved\r\n================\r\n\r\nFeel free to open pull requests or issues. GitHub is the canonical location of this project.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}